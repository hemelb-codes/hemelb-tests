#!/usr/bin/env python
import argparse
import os.path
from pathlib import Path

import numpy as np

from hlb.parsers.extraction import ExtractedProperty
from hlb.parsers.offset import OffsetFile

np.seterr(invalid="ignore")


def masky(array):
    return np.ma.masked_invalid(array, copy=False)


def dir_to_xtroff(dirpath: Path):
    """Each extracted property file must come with an offset file.

    Convert a directory's contents to a list of tuples (xtr, off), with
    sanity checking. Paths are relative to the dirpath.
    """
    # dict(basename -> dict(xtr/off -> filename))
    results = {}
    for f in dirpath.iterdir():
        assert f.is_file()
        ext = f.suffix[1:]
        if ext not in ("xtr", "off"):
            continue
        base = f.stem
        try:
            r = results[base]
        except KeyError:
            r = results[base] = {}

        r[ext] = f

    # Want this sorted by base
    return [
        (results[k]["xtr"].relative_to(dirpath), results[k]["off"].relative_to(dirpath))
        for k in sorted(results.keys())
    ]


def ExtractedCompare(dir1: Path, dir2: Path):
    """Simple function to compare two HemeLB extracted property folders."""
    extraction1 = dir_to_xtroff(dir1)
    extraction2 = dir_to_xtroff(dir2)

    assert extraction1 == extraction2, "Different extracted property/offset files found"

    for xtr, off in extraction1:
        CompareExtractedPropertyFiles(dir1 / xtr, dir2 / xtr)
        CompareOffsetFiles(dir1 / off, dir2 / off)


class Orderer(object):
    def __init__(self, snap):
        self.nx, self.ny, self.nz = snap.grid.max(axis=0)
        oneD = self.ThreeToOne(snap.grid)
        self.ordering = oneD.argsort()
        return

    def ThreeToOne(self, grid):
        return (grid[..., 0] * self.ny + grid[..., 1]) * self.nz + grid[..., 2]

    def __call__(self, snap):
        return snap[self.ordering]

    pass


# This deliberately doesn't compare version numbers, so long as the parser can cope with the newer version
def CompareExtractedPropertyFiles(file1, file2):
    ep1 = ExtractedProperty(str(file1))
    ep2 = ExtractedProperty(str(file2))

    # Some basic file-level assertions
    assert (
        ep1.voxelSizeMetres == ep2.voxelSizeMetres
    ), f"Different voxel sizes in extracted files {file1} and {file2}"
    assert np.array_equal(
        ep1.originMetres, ep2.originMetres
    ), f"Different origin positions in extracted files {file1} and {file2}"
    assert (
        ep1.siteCount == ep2.siteCount
    ), "Different site count in extracted files {file1} and {file2}"
    assert (
        ep1.fieldCount == ep2.fieldCount
    ), "Different field count in extracted files {file1} and {file2}"

    # Check that the times of extraction are the same
    assert np.array_equal(
        ep1.times, ep2.times
    ), "Different extraction times in extracted files {file1} and {file2}"

    # Now check the field specs are identical
    fields1 = ep1.GetFieldSpec()
    fields2 = ep2.GetFieldSpec()

    assert sum(1 for _ in fields1) == sum(
        1 for _ in fields2
    ), "Different numbers of fields in extracted files {file1} and {file2}"

    for (field1, field2) in zip(fields1, fields2):
        assert (
            field1 == field2
        ), "Different field in extracted files {file1} and {file2}"

    orderer1 = None
    orderer2 = None

    # Now compare each data point
    for time in ep1.times:
        if orderer1 is None:
            snap1 = ep1.GetByTimeStep(time)
            orderer1 = Orderer(snap1)
        if orderer2 is None:
            snap2 = ep2.GetByTimeStep(time)
            orderer2 = Orderer(snap2)

        snap1 = orderer1(ep1.GetByTimeStep(time))
        snap2 = orderer2(ep2.GetByTimeStep(time))

        assert len(snap1) == len(
            snap2
        ), "Different extraction lengths at time {time} in {file1} and {file2}"

        for field in snap1.dtype.names:
            if field == "id":
                continue

            errorThreshold = 1e-12
            field1 = np.ma.masked_invalid(snap1[field])
            field2 = np.ma.masked_invalid(snap2[field])
            assert np.all(field1.mask == field2.mask), f"Field {field} has differing finiteness at time {time} in files {file1} and {file2}"
            delta = np.abs(field1 - field2)

            assert np.all(
                delta < errorThreshold,
            ), f"Field {field} differed [max difference {delta.max()}] at time {time} in files {file1} and {file2}"

    print("Everything OK in extracted property files")


def CompareOffsetFiles(file1, file2):
    off1 = OffsetFile(file1)
    off2 = OffsetFile(file2)
    assert off1.NumberOfRanks == off2.NumberOfRanks
    # Since "golden" data is in a snapshot v4 and we're now in v5,
    # which has a different header size, the offsets will be shifted
    # by a constant.
    rel_off1 = off1.Data - off1.Data[0]
    rel_off2 = off2.Data - off2.Data[0]
    assert np.all(rel_off1 == rel_off2)


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument("input1", help="One extracted properties directory")
    parser.add_argument(
        "input2", help="A second extracted properties directory to compare with"
    )
    args = parser.parse_args()

    d1 = Path(args.input1)
    if not d1.is_dir():
        print("Input directory 1 must exist")
        parser.print_help()
        raise SystemExit(1)

    d2 = Path(args.input2)
    if not d2.is_dir():
        print("Input directory 2 must exist")
        parser.print_help()
        raise SystemExit(1)

    ExtractedCompare(d1, d2)
